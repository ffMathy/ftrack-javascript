/* AutoGenerated Code, changes may be overwritten
 * INPUT GRAMMAR:
 * // Example tsPEG grammar for the given Python pyparsing code
 * // Define the recursive structure of expressions
 * Expression := NotExpression | AndExpression | OrExpression | Condition
 * Condition := field=Field operator=Operator value={QuotedValue | Value}
 * NotExpression := 'not' _ expression=Expression
 * AndExpression := left=Expression _ 'and' _ right=Expression
 * OrExpression := left=Expression _ 'or' _ right=Expression
 * // Define terminal patterns
 * Field := '[a-zA-Z_][a-zA-Z0-9_.]*'
 * EqualsOperator := '='
 * NotEqualsOperator := '!='
 * GreaterThanEqualOperator := '>='
 * LesserThanEqualOperator := '<='
 * GreaterThanOperator := '>'
 * LesserThanOperator := '<'
 * Operator := EqualsOperator | NotEqualsOperator | GreaterThanEqualOperator | LesserThanEqualOperator | GreaterThanOperator | LesserThanOperator
 * Value := '[a-zA-Z0-9\-_,./*@+]+'
 * QuotedValue := '"[^"]*"'
 * // Define whitespace handling
 * _ := '[ \t\n\r]*'  // tsPEG automatically handles whitespace, so we define it for clarity
 */
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
  kind: ASTKinds;
}
export const enum ASTKinds {
  Expression_1 = "Expression_1",
  Expression_2 = "Expression_2",
  Expression_3 = "Expression_3",
  Expression_4 = "Expression_4",
  Condition = "Condition",
  Condition_$0_1 = "Condition_$0_1",
  Condition_$0_2 = "Condition_$0_2",
  NotExpression = "NotExpression",
  AndExpression = "AndExpression",
  OrExpression = "OrExpression",
  Field = "Field",
  EqualsOperator = "EqualsOperator",
  NotEqualsOperator = "NotEqualsOperator",
  GreaterThanEqualOperator = "GreaterThanEqualOperator",
  LesserThanEqualOperator = "LesserThanEqualOperator",
  GreaterThanOperator = "GreaterThanOperator",
  LesserThanOperator = "LesserThanOperator",
  Operator_1 = "Operator_1",
  Operator_2 = "Operator_2",
  Operator_3 = "Operator_3",
  Operator_4 = "Operator_4",
  Operator_5 = "Operator_5",
  Operator_6 = "Operator_6",
  Value = "Value",
  QuotedValue = "QuotedValue",
  _ = "_",
}
export type Expression =
  | Expression_1
  | Expression_2
  | Expression_3
  | Expression_4;
export type Expression_1 = NotExpression;
export type Expression_2 = AndExpression;
export type Expression_3 = OrExpression;
export type Expression_4 = Condition;
export interface Condition {
  kind: ASTKinds.Condition;
  field: Field;
  operator: Operator;
  value: Condition_$0;
}
export type Condition_$0 = Condition_$0_1 | Condition_$0_2;
export type Condition_$0_1 = QuotedValue;
export type Condition_$0_2 = Value;
export interface NotExpression {
  kind: ASTKinds.NotExpression;
  expression: Expression;
}
export interface AndExpression {
  kind: ASTKinds.AndExpression;
  left: Expression;
  right: Expression;
}
export interface OrExpression {
  kind: ASTKinds.OrExpression;
  left: Expression;
  right: Expression;
}
export type Field = string;
export type EqualsOperator = string;
export type NotEqualsOperator = string;
export type GreaterThanEqualOperator = string;
export type LesserThanEqualOperator = string;
export type GreaterThanOperator = string;
export type LesserThanOperator = string;
export type Operator =
  | Operator_1
  | Operator_2
  | Operator_3
  | Operator_4
  | Operator_5
  | Operator_6;
export type Operator_1 = EqualsOperator;
export type Operator_2 = NotEqualsOperator;
export type Operator_3 = GreaterThanEqualOperator;
export type Operator_4 = LesserThanEqualOperator;
export type Operator_5 = GreaterThanOperator;
export type Operator_6 = LesserThanOperator;
export type Value = string;
export type QuotedValue = string;
export type _ = string;
class Parser {
  private readonly input: string;
  private pos: PosInfo;
  private negating: boolean = false;
  private memoSafe: boolean = true;
  constructor(input: string) {
    this.pos = { overallPos: 0, line: 1, offset: 0 };
    this.input = input;
  }
  public reset(pos: PosInfo) {
    this.pos = pos;
  }
  public finished(): boolean {
    return this.pos.overallPos === this.input.length;
  }
  public clearMemos(): void {
    this.$scope$Expression$memo.clear();
  }
  protected $scope$Expression$memo: Map<
    number,
    [Nullable<Expression>, PosInfo]
  > = new Map();
  public matchExpression(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<Expression> {
    const fn = () => {
      return this.choice<Expression>([
        () => this.matchExpression_1($$dpth + 1, $$cr),
        () => this.matchExpression_2($$dpth + 1, $$cr),
        () => this.matchExpression_3($$dpth + 1, $$cr),
        () => this.matchExpression_4($$dpth + 1, $$cr),
      ]);
    };
    const $scope$pos = this.mark();
    const memo = this.$scope$Expression$memo.get($scope$pos.overallPos);
    if (memo !== undefined) {
      this.reset(memo[1]);
      return memo[0];
    }
    const $scope$oldMemoSafe = this.memoSafe;
    this.memoSafe = false;
    this.$scope$Expression$memo.set($scope$pos.overallPos, [null, $scope$pos]);
    let lastRes: Nullable<Expression> = null;
    let lastPos: PosInfo = $scope$pos;
    for (;;) {
      this.reset($scope$pos);
      const res = fn();
      const end = this.mark();
      if (end.overallPos <= lastPos.overallPos) break;
      lastRes = res;
      lastPos = end;
      this.$scope$Expression$memo.set($scope$pos.overallPos, [
        lastRes,
        lastPos,
      ]);
    }
    this.reset(lastPos);
    this.memoSafe = $scope$oldMemoSafe;
    return lastRes;
  }
  public matchExpression_1(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<Expression_1> {
    return this.matchNotExpression($$dpth + 1, $$cr);
  }
  public matchExpression_2(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<Expression_2> {
    return this.matchAndExpression($$dpth + 1, $$cr);
  }
  public matchExpression_3(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<Expression_3> {
    return this.matchOrExpression($$dpth + 1, $$cr);
  }
  public matchExpression_4(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<Expression_4> {
    return this.matchCondition($$dpth + 1, $$cr);
  }
  public matchCondition(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<Condition> {
    return this.run<Condition>($$dpth, () => {
      let $scope$field: Nullable<Field>;
      let $scope$operator: Nullable<Operator>;
      let $scope$value: Nullable<Condition_$0>;
      let $$res: Nullable<Condition> = null;
      if (
        true &&
        ($scope$field = this.matchField($$dpth + 1, $$cr)) !== null &&
        ($scope$operator = this.matchOperator($$dpth + 1, $$cr)) !== null &&
        ($scope$value = this.matchCondition_$0($$dpth + 1, $$cr)) !== null
      ) {
        $$res = {
          kind: ASTKinds.Condition,
          field: $scope$field,
          operator: $scope$operator,
          value: $scope$value,
        };
      }
      return $$res;
    });
  }
  public matchCondition_$0(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<Condition_$0> {
    return this.choice<Condition_$0>([
      () => this.matchCondition_$0_1($$dpth + 1, $$cr),
      () => this.matchCondition_$0_2($$dpth + 1, $$cr),
    ]);
  }
  public matchCondition_$0_1(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<Condition_$0_1> {
    return this.matchQuotedValue($$dpth + 1, $$cr);
  }
  public matchCondition_$0_2(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<Condition_$0_2> {
    return this.matchValue($$dpth + 1, $$cr);
  }
  public matchNotExpression(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<NotExpression> {
    return this.run<NotExpression>($$dpth, () => {
      let $scope$expression: Nullable<Expression>;
      let $$res: Nullable<NotExpression> = null;
      if (
        true &&
        this.regexAccept(String.raw`(?:not)`, "", $$dpth + 1, $$cr) !== null &&
        this.match_($$dpth + 1, $$cr) !== null &&
        ($scope$expression = this.matchExpression($$dpth + 1, $$cr)) !== null
      ) {
        $$res = { kind: ASTKinds.NotExpression, expression: $scope$expression };
      }
      return $$res;
    });
  }
  public matchAndExpression(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<AndExpression> {
    return this.run<AndExpression>($$dpth, () => {
      let $scope$left: Nullable<Expression>;
      let $scope$right: Nullable<Expression>;
      let $$res: Nullable<AndExpression> = null;
      if (
        true &&
        ($scope$left = this.matchExpression($$dpth + 1, $$cr)) !== null &&
        this.match_($$dpth + 1, $$cr) !== null &&
        this.regexAccept(String.raw`(?:and)`, "", $$dpth + 1, $$cr) !== null &&
        this.match_($$dpth + 1, $$cr) !== null &&
        ($scope$right = this.matchExpression($$dpth + 1, $$cr)) !== null
      ) {
        $$res = {
          kind: ASTKinds.AndExpression,
          left: $scope$left,
          right: $scope$right,
        };
      }
      return $$res;
    });
  }
  public matchOrExpression(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<OrExpression> {
    return this.run<OrExpression>($$dpth, () => {
      let $scope$left: Nullable<Expression>;
      let $scope$right: Nullable<Expression>;
      let $$res: Nullable<OrExpression> = null;
      if (
        true &&
        ($scope$left = this.matchExpression($$dpth + 1, $$cr)) !== null &&
        this.match_($$dpth + 1, $$cr) !== null &&
        this.regexAccept(String.raw`(?:or)`, "", $$dpth + 1, $$cr) !== null &&
        this.match_($$dpth + 1, $$cr) !== null &&
        ($scope$right = this.matchExpression($$dpth + 1, $$cr)) !== null
      ) {
        $$res = {
          kind: ASTKinds.OrExpression,
          left: $scope$left,
          right: $scope$right,
        };
      }
      return $$res;
    });
  }
  public matchField($$dpth: number, $$cr?: ErrorTracker): Nullable<Field> {
    return this.regexAccept(
      String.raw`(?:[a-zA-Z_][a-zA-Z0-9_.]*)`,
      "",
      $$dpth + 1,
      $$cr,
    );
  }
  public matchEqualsOperator(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<EqualsOperator> {
    return this.regexAccept(String.raw`(?:=)`, "", $$dpth + 1, $$cr);
  }
  public matchNotEqualsOperator(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<NotEqualsOperator> {
    return this.regexAccept(String.raw`(?:!=)`, "", $$dpth + 1, $$cr);
  }
  public matchGreaterThanEqualOperator(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<GreaterThanEqualOperator> {
    return this.regexAccept(String.raw`(?:>=)`, "", $$dpth + 1, $$cr);
  }
  public matchLesserThanEqualOperator(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<LesserThanEqualOperator> {
    return this.regexAccept(String.raw`(?:<=)`, "", $$dpth + 1, $$cr);
  }
  public matchGreaterThanOperator(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<GreaterThanOperator> {
    return this.regexAccept(String.raw`(?:>)`, "", $$dpth + 1, $$cr);
  }
  public matchLesserThanOperator(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<LesserThanOperator> {
    return this.regexAccept(String.raw`(?:<)`, "", $$dpth + 1, $$cr);
  }
  public matchOperator(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<Operator> {
    return this.choice<Operator>([
      () => this.matchOperator_1($$dpth + 1, $$cr),
      () => this.matchOperator_2($$dpth + 1, $$cr),
      () => this.matchOperator_3($$dpth + 1, $$cr),
      () => this.matchOperator_4($$dpth + 1, $$cr),
      () => this.matchOperator_5($$dpth + 1, $$cr),
      () => this.matchOperator_6($$dpth + 1, $$cr),
    ]);
  }
  public matchOperator_1(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<Operator_1> {
    return this.matchEqualsOperator($$dpth + 1, $$cr);
  }
  public matchOperator_2(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<Operator_2> {
    return this.matchNotEqualsOperator($$dpth + 1, $$cr);
  }
  public matchOperator_3(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<Operator_3> {
    return this.matchGreaterThanEqualOperator($$dpth + 1, $$cr);
  }
  public matchOperator_4(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<Operator_4> {
    return this.matchLesserThanEqualOperator($$dpth + 1, $$cr);
  }
  public matchOperator_5(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<Operator_5> {
    return this.matchGreaterThanOperator($$dpth + 1, $$cr);
  }
  public matchOperator_6(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<Operator_6> {
    return this.matchLesserThanOperator($$dpth + 1, $$cr);
  }
  public matchValue($$dpth: number, $$cr?: ErrorTracker): Nullable<Value> {
    return this.regexAccept(
      String.raw`(?:[a-zA-Z0-9\-_,./*@+]+)`,
      "",
      $$dpth + 1,
      $$cr,
    );
  }
  public matchQuotedValue(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<QuotedValue> {
    return this.regexAccept(String.raw`(?:"[^"]*")`, "", $$dpth + 1, $$cr);
  }
  public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
    return this.regexAccept(String.raw`(?:[ \t\n\r]*)`, "", $$dpth + 1, $$cr);
  }
  public test(): boolean {
    const mrk = this.mark();
    const res = this.matchExpression(0);
    const ans = res !== null;
    this.reset(mrk);
    return ans;
  }
  public parse(): ParseResult {
    const mrk = this.mark();
    const res = this.matchExpression(0);
    if (res) return { ast: res, errs: [] };
    this.reset(mrk);
    const rec = new ErrorTracker();
    this.clearMemos();
    this.matchExpression(0, rec);
    const err = rec.getErr();
    return { ast: res, errs: err !== null ? [err] : [] };
  }
  public mark(): PosInfo {
    return this.pos;
  }
  // @ts-ignore: loopPlus may not be called
  private loopPlus<T>(func: $$RuleType<T>): Nullable<[T, ...T[]]> {
    return this.loop(func, 1, -1) as Nullable<[T, ...T[]]>;
  }
  private loop<T>(func: $$RuleType<T>, lb: number, ub: number): Nullable<T[]> {
    const mrk = this.mark();
    const res: T[] = [];
    while (ub === -1 || res.length < ub) {
      const preMrk = this.mark();
      const t = func();
      if (t === null || this.pos.overallPos === preMrk.overallPos) {
        break;
      }
      res.push(t);
    }
    if (res.length >= lb) {
      return res;
    }
    this.reset(mrk);
    return null;
  }
  private run<T>(_$$dpth: number, fn: $$RuleType<T>): Nullable<T> {
    const mrk = this.mark();
    const res = fn();
    if (res !== null) return res;
    this.reset(mrk);
    return null;
  }
  // @ts-ignore: choice may not be called
  private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
    for (const f of fns) {
      const res = f();
      if (res !== null) {
        return res;
      }
    }
    return null;
  }
  private regexAccept(
    match: string,
    mods: string,
    dpth: number,
    cr?: ErrorTracker,
  ): Nullable<string> {
    return this.run<string>(dpth, () => {
      const reg = new RegExp(match, "y" + mods);
      const mrk = this.mark();
      reg.lastIndex = mrk.overallPos;
      const res = this.tryConsume(reg);
      if (cr) {
        cr.record(mrk, res, {
          kind: "RegexMatch",
          // We substring from 3 to len - 1 to strip off the
          // non-capture group syntax added as a WebKit workaround
          literal: match.substring(3, match.length - 1),
          negated: this.negating,
        });
      }
      return res;
    });
  }
  private tryConsume(reg: RegExp): Nullable<string> {
    const res = reg.exec(this.input);
    if (res) {
      let lineJmp = 0;
      let lind = -1;
      for (let i = 0; i < res[0].length; ++i) {
        if (res[0][i] === "\n") {
          ++lineJmp;
          lind = i;
        }
      }
      this.pos = {
        overallPos: reg.lastIndex,
        line: this.pos.line + lineJmp,
        offset:
          lind === -1
            ? this.pos.offset + res[0].length
            : res[0].length - lind - 1,
      };
      return res[0];
    }
    return null;
  }
  // @ts-ignore: noConsume may not be called
  private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
    const mrk = this.mark();
    const res = fn();
    this.reset(mrk);
    return res;
  }
  // @ts-ignore: negate may not be called
  private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
    const mrk = this.mark();
    const oneg = this.negating;
    this.negating = !oneg;
    const res = fn();
    this.negating = oneg;
    this.reset(mrk);
    return res === null ? true : null;
  }
  // @ts-ignore: Memoise may not be used
  private memoise<K>(
    rule: $$RuleType<K>,
    memo: Map<number, [Nullable<K>, PosInfo]>,
  ): Nullable<K> {
    const $scope$pos = this.mark();
    const $scope$memoRes = memo.get($scope$pos.overallPos);
    if (this.memoSafe && $scope$memoRes !== undefined) {
      this.reset($scope$memoRes[1]);
      return $scope$memoRes[0];
    }
    const $scope$result = rule();
    if (this.memoSafe)
      memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
    return $scope$result;
  }
}
export function parse(s: string): ParseResult {
  const p = new Parser(s);
  return p.parse();
}
export interface ParseResult {
  ast: Nullable<Expression>;
  errs: SyntaxErr[];
}
export interface PosInfo {
  readonly overallPos: number;
  readonly line: number;
  readonly offset: number;
}
export interface RegexMatch {
  readonly kind: "RegexMatch";
  readonly negated: boolean;
  readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
class SyntaxErr {
  public pos: PosInfo;
  public expmatches: MatchAttempt[];
  constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
    this.pos = pos;
    this.expmatches = [...expmatches];
  }
  public toString(): string {
    return `Syntax Error at line ${this.pos.line}:${
      this.pos.offset
    }. Expected one of ${this.expmatches.map((x) =>
      x.kind === "EOF" ? " EOF" : ` ${x.negated ? "not " : ""}'${x.literal}'`,
    )}`;
  }
}
class ErrorTracker {
  private mxpos: PosInfo = { overallPos: -1, line: -1, offset: -1 };
  private regexset: Set<string> = new Set();
  private pmatches: MatchAttempt[] = [];
  public record(pos: PosInfo, result: any, att: MatchAttempt) {
    if ((result === null) === att.negated) return;
    if (pos.overallPos > this.mxpos.overallPos) {
      this.mxpos = pos;
      this.pmatches = [];
      this.regexset.clear();
    }
    if (this.mxpos.overallPos === pos.overallPos) {
      if (att.kind === "RegexMatch") {
        if (!this.regexset.has(att.literal)) this.pmatches.push(att);
        this.regexset.add(att.literal);
      } else {
        this.pmatches.push(att);
      }
    }
  }
  public getErr(): SyntaxErr | null {
    if (this.mxpos.overallPos !== -1)
      return new SyntaxErr(this.mxpos, this.pmatches);
    return null;
  }
}
